자바스크립트 async 와 await

async 와  await는 자바스크립트의 비도익 처리 패턴 중 가장 최근에 나온
문법입니다. 기존의 비동기 처리 방식인 콜백함수와 프로미스의 단점을
보완하고 개발자가 읽기 좋은 코드를 작성 할 수 있음.

ex)
var user = fetchUser('domain.com/users/1');
if (user.id === 1) {
 console.log(user.name);
}

fetchUser() 라는 메서드를 호출하면 앞에서 봤던 코드처럼 사용자 객체를 반환한다고
가정하고, (서버에서 HTTP 통신 코드라고 가정한다면) 위 코드는 async & await 문법이
적용된 형태라고 봐도 됨.

logName() 이라는 함수로 감싸기
ex) 
function logName() {
 var user = fetchUser('domain.com/user/1');
 if (user.id === 1) {
  console.log(user.name);
 }
}

여기서 async, await 를 추가해주면
ex) 
 async function logName() {
 var user = await fetchUser('domain.com/users/1');
 if (user.id === 1) {
  console.log(user.name);
 }
}

위 코드 설명
ex) 
function logName() {
 var user = fetchUser('domain.com/user/1', function(user) {
   if (user.id === 1) {
     console.log(user.name);
   }
});
}
fetchUser() 라고 하는 코드는 서버에서 HTTP 통신 코드 라고 가정하고,
자바스크립트의 비동기 처리 코드는 아래와 같이 콜백을 사용해야지 코드의 실행순서를 보장 받을 수 
있다.

*async & await 기본 문법
ex)
async function 함수명() {
 await 비동기_처리_메서드명();
}
먼저 함수의 앞에 async 라는 예약어를 붙입니다.
그리고 함수의 내부 로직중 HTTP 통신을 하는 비동기 처리 코드 앞에 await를 붙입니다.
여기서 주의 하셔야 할 점은 비동기 처리 메서드가 꼭 프로미스 객체를 반환 해야
await 가 의도한 대로 동작합니다.
일반적으로 await의 대상이 되는 비동기 처리 코드는 Axios 등 프로미스를 
반환하는 API 호출 함수 입니다.

ex)
function fetchItems() {
  return new Promise(function(resolve, reject) {
    var items = [1, 2, 3];
    resolve(items)
  }
}

async function logItems() {
  var resultItems = await fetchItems();
  console.log(resultItems); //[1, 2, 3]
}

* async & await 예외처리
async & await 예외를 처리하는 방법은 try , catch 입니다.
프로미스에서 에러 처리를 위해 .catch()를 사용했던것
ex)
async function logTodoTitle() {
  try {
    var user = await getchUser();
    if (user.id === 1) {
      var todo = await fetchTodo();
      console.log(todo.title);
    }
  } catch (error) {
    console.log(error);
  }
}