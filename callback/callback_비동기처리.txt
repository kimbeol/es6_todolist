Callback > Promise

- 자바스크립트의 비동기 처리, 특정 코드의 연산이 끝날 때 까지
  코드의 실행을 멈추지 않고, 다음 코드를 먼저 실행하는 것 을 의미합니다.

- 비동기 처리의 가장 흔한 사례는 제이쿼리 ajax
  jquery로 실제 웹 서비스를 개발할 때 ajax 통신을 빼놓을 수가 없습니다.

ex) jquery ajax
function getData() {
  var tableData;
  $.get('https://domain.com/products/1',function(response){
    tableData = response;
   });
   return tableData;
}
console.log(getData());
 
: 결과는  undefined
  (get 요청한 연산을 수행중 return 구문이 실행됨.)
* 이렇게 특정 로직의 실행이 끝날 때까지 기다려주지 않고 나머지 코드를 먼저
실행하는 것이 비동기 처리입니다.

두 번째 사례
setTimeout (Web API) 코드를 바로 실행하지 않고 지정한 시간만큼 기다렸다가
로직을 실행

* 콜백 함수로 비동기 처리 방식의 문제점 해결
앞에서 자바스크립트 비동기 처리 방식에 의해 야기될 수 있는 문제들을 해결
할 수 있는문제. 콜백(callback) 함수를 이용하는 것이다.
ex) callback
function getData(callbackFunc) {
  $.get('https://domain.com/products/1', function(response) {
    callbackFunc(response); // 서버에서 받은 데이터 reponse를 callbackFunc() 함수에 넘겨줌
  });
}
getData(function(tableData) {
  console.log(tableData); // $.get() 의 response 값이 tableData에 전달됨
});
  : 즉 데이터가 준비된 시점에서만 저희가 원하는 동작을 수행할 수 있다.

*Callback hell (콜백 지옥)
콜백 지옥은 비동기 처리 로직을 위해 콜백 함수를 연속해서 사용할 때 
발생 하는 문제.
ex)
$.get('url', function(response) {
  parseValue(response, function(id) {
    auth(id, function(result) {
      display(result, function(text) {
        console.log(text);
      }
    }
  }
}

이와 같은 구조는 가독성이 떨어지고, 로직을 변경하기도 어렵다.

*콜백 지옥을 해결하는 방법
Promise 나 Async를 사용

만약 코딩패턴으로만 콜백지옥을 해결하려면,
ex)
function parseValueDone(id) {
    (auth(id, authDone);
}
function authDone(result) {
    display(result, displayDone);
}
function displayDone(text) {
   console.log(text);
}
$.get('url', function(response) {
   parseValue(reponse, parseValueDone);
});

앞에 코드를 개선한 코드,
중첩해서 선언했던 콜백 익명 함수를 각각의
함수로 구분 지었다.
ajax통신으로 받은 데이터를  parsevalue() 메서드로 파싱 합니다.
parseValueDone()에 파싱 한 결과값인 id가 전달되고 auth()메서드가
실행됩니다. auth()메서드로 인증을 거치고 나면 콜백 함수authDone()이
실행됩니다. 인증결과 값인 result 로 display()를 호출 하면 마지막으로 
displayDone() 메서드가 수행되면서 text가 콘솔에 출력됩니다.
