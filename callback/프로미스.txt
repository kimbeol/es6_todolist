- promise
프로미스는 자바스크립트 비동기 처리에 사용되는 객체입니다.
비동기 처리란 '특정 코드의 실행이 완료될 때까지 기다리지 않고 다음
코드를 먼저 수행하는 자바스크립트의 특성'을 의미합니다.

- 프로미스는 주로 서버에서 받아온 데이터를 화면에 표시할 때 사용합니다.
  일반적으로 서버에서 데이터를 요청하고 받아오기 위해 아래와 같은 API 를
  사용합니다.
ex) 
   $.get('url 주소/products/1', function(response) {
     ....
   });
위 API 가 실행되면 서버에 데이터 요청을 하고, 그런데
여기서 데이터를 받아오기도 전에 데이터를 받아오는 도중,
밑에 구문이나 다른 구문들이 실행이 되어,  데이터를 표시하려고
"오류가 발생하거나 빈화면이 뜨는경우가 발생 합니다."
이와 같은 문제점을 해결 하기 위한 방법 중 하나가 "프로미스" 입니다.

- 기초
ex) 콜백함수 구문
  function getData(callbackFunc) {
   $.get('url 주소/products/1', function(response) {
     callbackFunc(response);
   });
}
getData(function(tableData) {
  console.log(tableData);
});

ex)프로미스 구문 변경 : new Promise, resolve, then
function getData(callback) {
  // new promise() 추가
  return new Promise(function(resolve, reject) {
     // 데이터를 받으면 resolve() 호출
    $.get('url 주소/products/1', function(response) {
      resolve(response);
    }
  }
}
// then : getData() 의 실행이 정상완료 되면 호출됨.
getData().then(function(tableData) {
   // resolve() 의 결과 값이 여기로 전달됨.
  console.log(tableData);  // $.get() 의  response 값이 tableData 에 전달됨
});

- 프로미스 3가지 상태 (states) : 처리과정
프로미스의 상태(states) 처리과정, new Promise()로 프로미스를 생성하고, 종료될때까지
3가지 상태를 갖습니다.
 1. Pending(대기) : 비동기 처리 로직이 아직 완료되지 않은 상태
 2. Fulfilled(이행) : 비동기 처리가 완료되어 프로미스가 결과 값을 반환해준 상태
 3. rejected(실패) : 비동기 처리가 실패하거나 오류가 발생한 상태

1. new Promise() 메서드 호출시 Pending 상태가 됩니다.
  new Promise() 메서드를 호출할 때 
   1-1.콜백 함수를 선언할 수 있고, 
   1-2.콜백 함수의 인자는 resolve, reject 있다.
2.Fulfilled(이행 = 완료)
  여기서 콜백 함수의 인자 resolve 를 실행하면, 이행(Fulfilled) 상태가 됩니다.
ex) 
new Promise(function(resolve, reject) {
  resolve();
}
그리고 이행 상태가 되면 아래와 같이  then()을 이용하여 처리 결과 값을 받을수 있습니다.
ex) 
function getData() {
  return new Promise(function(resolve, reject) {
    var data = 100;
    resolve(data);
  });
}
// resolve()의 결과 값 data를 resolvedData로 받음
getData().then(function(resolvedData() {
  console.log(resolvedData);
});
3.Rejected(실패)
new Promise()로 프로미스 객체를 생성하면
resolve, reject 를 사용할 수 있다고 했습니다.
reject를 아래와 같이 호출하면 실패 상태가 됩니다.
ex)
   new Promise(function(resolve, reject) {
     reject();
   });
이렇게 실패 상태가 되면 실패한 이유(실패 처리의 결과 값)를 
catch()로 받을 수 있다.
ex)
  function getData() {
    return new Promise(function(resolve, reject) {
      reject(new Error("Request is failed"));   
    });
}

// reject() 의 결과 값 Error를 err에 받음
getData().then().catch(function(err) {
  console.log(err);
});

* new Promise > .then(), .catch()

- Promise 예제
ex)
function getData() {
  return new promise(function(resolve, reject) {
   $.get('url 주소/products/1', function(response) {
      if ( response ) {
        resolve(response);
      }

      reject(new Error("Request is failed"));
   }
  }
}
//  위  $.get() 호출 결과에 따라 'response' 또는 'Error' 출력
getData().then(function(data) {
  console.log(data);  // response 값 출력
}).catch(function(err) {
  console.error(err);  // Error 출력
});

- 여러 개의 Promise 연결 (Promise Chaining)
ex)
function getData() {
 return new promise({
    ....
 });
}
// then() 으로 여러 개의 프로미스를 연결한 방식
getData()
   .then(function(data) {
      ...
   })
   .then(function() {
      ...
   })
   .then(function() {
      ...
   });

ex) 비동기 처리 예제 setTimeout() API
new Promise(function(resolve, reject) {
  setTimeout(function() {
     resolve(1);
  }, 2000);
})
.then(function(result) {
  console.log(log(result);
  return result + 10;
})
.then(function(result) {
  console.log(result);
  return result + 20'
})
.then(function(result) {
  console.log(result);
});

- 실무에서 있을 법한 프로미스 연결 사례
ex)
 getData(userInfo)
    .then(parsevalue)
    .then(auth)
    .then(display);

var userInfo = {
   id: 'test@abc.com',
   pw: '****'
 };

function parseValue() {
  return new Promise({
     ...
  });
}
function auth() {
  return new Promise({
     ...
  });
}
function display() {
  return new Promise({
     ...
  });
}

- 프로미스의 에러 처리 방법 ( 2가지 에러처리)
1. then() 의 두번째 인자로 에러 처리
  getData().then(
    handleSuccess,
    handleError
  );  
2.catch() 를 이용하는 방법
 getData().then().catch();

위 2가지 방법 모두 프로미스의  reject() 메서드가 호출되어
실패 상태가 된 경우에 실행됩니다. (프로미스의 로직이 정상적으로
돌아가지 않는 경우 호출됨)
ex)
function getData() {
  return new promise(function(resolve, reject) {
     reject('failed');
  });
}
// 1. then() 의 두 번째  인자로 에러를 처리하는 코드
getData().then(function) {
  ...
 }, function(err) {
   console.log(err);
 }
});

// 2. catch() 로 에러를 처리하는 코드
getData().then().catch(function(err) {
  console.log(err);
 });

- 프로미스 에러 처리는 가급적  catch() 를 사용
catch() 로 에러 처리가 효율적

ex)
 // then()의 두 번째 인자로는 감지하지 못하는 오류
function getData() {
  return new Promise(function(resolve, reject) {
    resolve('hi');
  });
}

getData().then(function(result) {
  console.log(result);
  throw new Error("Error in then()");
}, function(err) {
  console.log('then error : ', err);
});

// getData() 함수의 프로미스에서 resolve() 메서드를 호출하여
정상적으로 로직을 처리 헀지만, then() 의 첫 번째 콜백 함수 내부에서 
오류가 나는 경우 오류를 제대로 잡아내지 못함. : (uncaught (in promise) error:
하지만..
getData().then(function(result) {
  console.log(result);
  throw new Error("Error in then()");
}).catch(function(err) {
  console.log("then error : ", err);
});
발생한 에러를 성공적으로 콘솔에 출력한 모습

더 많은 에외 처리 상황을 위해 프로미스의 끝에 가급적 catch()를 붙이기.







